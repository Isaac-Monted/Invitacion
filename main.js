// constantes
const Fecha_boda = '8 de Noviembre';

// Escucha el evento de carga del DOM
document.addEventListener("DOMContentLoaded", () => {
    colocarHistoria1();
    colocarHistoria2();
    generarLuciernagas(); // Funci칩n para generar luci칠rnagas

    // Crear contenedor si no existe
    if (!document.getElementById('contador')) {
        const contadorDiv = document.createElement('div');
        contadorDiv.id = 'contador';
        document.getElementById('Contenedor_corazon').appendChild(contadorDiv);
    }
    
    actualizarContador(); // Funci칩n para actualizar el contador
    setInterval(actualizarContador, 1000);

    // Llama a la funci칩n de animaci칩n de los novios
    initWalkingCoupleAnimation();

    // Llama a la funcion de animacion del carrucel
    initGodparentsCarousel();

    // Llamar a la funcion de animacion de galeria
    initGalleryAnimations();
});

function colocarHistoria1() {
    const $Historia = `La historia que te voy a contar es muy especial, ya que se trata de un amor que empezo con una coincidencia o un accidente que conectarioa a dos personas que habian perdido la esperanza en el amor. pero todo esto cambiaria un 26 de diciembre cuando dos desconocidos se encontrarian el uno al otro sin pensar que llegar칤an a ser tan importantes el uno para el otro. Fue amor a primera vista, cada vez que ellos dos estaban juntos hacian del lugar algo unico, sin importar donde o cuando, su compa침ia era mas que suficiente.<br> No paso mucho tiempo cuando un 28 de enero decidirian por fin estar juntos<br>`;

    const contenedor = document.getElementById("Historia"); // Selecciona el contenedor
    const elementoP = document.createElement("p"); // Crea un elemento <p>
    elementoP.innerHTML  = $Historia; // Asigna el texto almacenado en la variable
    contenedor.appendChild(elementoP); // A침ade el p치rrafo al contenedor
};

function colocarHistoria2() {
    const $Historia = `Y desde hay empezaria a escribirse un sin fin de historias y momentos inolvidables, un 26 de enero tomarian la decision de formalizar el compromiso pasando se ser novios a ser marido y mujer. Han pasado por muchos obstaculos y aunque no ha sido facil llegar a este punto, hay algo de lo que si estoy seguro, su amor es increbrantable y realmente quieren permanecer juntos por el resto de sus vidas. <br> desafortunadamente no te podre contar que es lo que sigue en esta historia ya que aun se esta escribiendo, pero si te puedes ser participe de ella este ${Fecha_boda} que sera el comienzo de un nuevo capitulo para estas dos personitas que se juraran amor eterno hasta que la muerte los separe.`;

    const contenedor = document.getElementById("Historia2"); // Selecciona el contenedor
    const elementoP = document.createElement("p"); // Crea un elemento <p>
    elementoP.innerHTML  = $Historia; // Asigna el texto almacenado en la variable
    contenedor.appendChild(elementoP); // A침ade el p치rrafo al contenedor
};

// Funci칩n para generar luci칠rnagas autom치ticamente
function generarLuciernagas() {
    const contenedor = document.getElementById("contenedor-luciernagas");
    const numeroDeLuciernagas = 25;
    const contador = document.getElementById('contador');

    for (let i = 0; i < numeroDeLuciernagas; i++) {
        const luciernaga = document.createElement('div');
        luciernaga.classList.add('luciernaga');

        // Posici칩n inicial aleatoria
        luciernaga.style.left = `${Math.random() * 100}%`;
        luciernaga.style.top = `${Math.random() * 100}%`;

        // Tama침o y opacidad aleatorios
        const size = Math.random() * 6 + 8; // Entre 8px y 14px
        luciernaga.style.width = `${size}px`;
        luciernaga.style.height = `${size}px`;
        luciernaga.style.opacity = Math.random() * 0.6 + 0.3; // Entre 0.3 y 0.9

        // Brillo base (para todas)
        luciernaga.style.backgroundColor = `rgba(255, 255, 255, ${Math.random() * 0.5 + 0.3})`;
        luciernaga.style.boxShadow = `0 0 ${size}px ${size/2}px rgba(255, 255, 255, 0.3)`;

        // Efecto especial (30% de probabilidad)
        if (Math.random() > 0.7) {
            luciernaga.style.width = `${size + 5}px`; // Tama침o extra
            luciernaga.style.height = `${size + 5}px`;
            luciernaga.style.boxShadow = `0 0 20px 10px rgba(255, 255, 255, 0.7)`; // Brillo intenso
        }

        // Animaci칩n (춰conserva tus keyframes originales!)
        const duration = Math.random() * 10 + 5;
        luciernaga.style.animation = `volar ${duration}s infinite ease-in-out`;
        luciernaga.style.animationDelay = `${Math.random() * 5}s`;

        contenedor.appendChild(luciernaga);
    }
}

// Funci칩n para las animaciones de la galer칤a al hacer scroll
function initGalleryAnimations() {
    const galleryItems = document.querySelectorAll('.gallery-item');

    if (galleryItems.length === 0) {
        console.warn("No se encontraron elementos de galer칤a para animar.");
        return;
    }

    // Aplica las clases iniciales (from-left o from-right) y el estado oculto
    galleryItems.forEach((item, index) => {
        if (index % 2 === 0) { // Elementos pares (0, 2, 4...)
            item.classList.add('from-left');
            item.classList.add('even-item'); // Clase auxiliar para JS
        } else { // Elementos impares (1, 3, 5...)
            item.classList.add('from-right');
            item.classList.add('odd-item'); // Clase auxiliar para JS
        }
        // No a침adimos 'fade-in' aqu칤, solo las clases iniciales para que comiencen ocultas
    });

    // Opciones para el Intersection Observer
    const observerOptions = {
        root: null, // Observa el viewport como ra칤z
        rootMargin: '0px', // Sin margen adicional
        threshold: 0.05 // Cuando el 10% del elemento es visible, activa la animaci칩n
    };

    // Callback que se ejecuta cuando los elementos cruzan el umbral de visibilidad
    const observerCallback = (entries) => { // 'observer' ya no es necesario aqu칤
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Si el elemento es visible, activa la animaci칩n final
                entry.target.classList.add('fade-in');
                // Al entrar en vista, removemos las clases de "entrada" para que 'fade-in' tome el control
                entry.target.classList.remove('from-left', 'from-right');
            } else {
                // Si el elemento NO es visible (sali칩 de la vista)
                entry.target.classList.remove('fade-in'); // Oculta la imagen
                // Reintroduce las clases de "entrada" para que vuelva a animarse al entrar
                if (entry.target.classList.contains('even-item')) {
                    entry.target.classList.add('from-left');
                } else if (entry.target.classList.contains('odd-item')) {
                    entry.target.classList.add('from-right');
                }
            }
        });
    };

    // Crea el Intersection Observer
    const observer = new IntersectionObserver(observerCallback, observerOptions);

    // Observa cada elemento de la galer칤a
    galleryItems.forEach(item => {
        observer.observe(item);
    });
}

// Funcion para el contador
function actualizarContador() {
    const fechaBoda = new Date('2025-11-08T15:00:00'); // Fecha y hora de tu boda
    const ahora = new Date();
    
    // Diferencia en milisegundos
    let diferencia = fechaBoda - ahora;
    const unDiaEnMs = 1000 * 60 * 60 * 24;
    
    // Evitar n칰meros negativos (si ya pas칩 la fecha)
    if (diferencia < 0) {
         // Si ya pas칩 m치s de un d칤a
        if (Math.abs(diferencia) >= unDiaEnMs) {
            contador.innerHTML = `
                <span class="mensaje-agradecimiento">
                    춰Gracias por haber sido parte de nuestro d칤a especial! 游눘<br>
                    <small>15 de Noviembre 2025</small>
                </span>
            `;
        }
        // Si es el d칤a de la boda
        else {
            contador.innerHTML = `
                <span class="mensaje-boda">
                    춰Hoy es el gran d칤a! 游눐<br>
                    <small>춰Estamos celebrando nuestro amor!</small>
                </span>
                
            `;
        }
        return;
    }
    
    // C치lculo de d칤as, horas, minutos y segundos
    const dias = Math.floor(diferencia / (1000 * 60 * 60 * 24));
    diferencia -= dias * (1000 * 60 * 60 * 24);
    
    const horas = Math.floor(diferencia / (1000 * 60 * 60));
    diferencia -= horas * (1000 * 60 * 60);
    
    const minutos = Math.floor(diferencia / (1000 * 60));
    diferencia -= minutos * (1000 * 60);
    
    const segundos = Math.floor(diferencia / 1000);
    
    // Mostrar el resultado
    document.getElementById('contador').innerHTML = `
        <div class="contador-item">
            <span class="contador-numero">${dias}</span>
            <span class="contador-etiqueta">d칤as</span>
        </div>
        <div class="contador-item">
            <span class="contador-numero">${horas}</span>
            <span class="contador-etiqueta">horas</span>
        </div>
        <div class="contador-item">
            <span class="contador-numero">${minutos}</span>
            <span class="contador-etiqueta">min</span>
        </div>
        <div class="contador-item">
            <span class="contador-numero">${segundos}</span>
            <span class="contador-etiqueta">seg</span>
        </div>
    `;
}

// Funci칩n para inicializar el carrusel de padrinos con navegaci칩n manual, puntos y auto-play
function initGodparentsCarousel() {
    const godparentsList = document.getElementById('godparentsCarousel');
    const prevButton = document.querySelector('.prev-button');
    const nextButton = document.querySelector('.next-button');
    const paginationContainer = document.getElementById('godparentsPagination');

    if (!godparentsList || !prevButton || !nextButton || !paginationContainer) {
        console.warn("Algunos elementos del carrusel de padrinos no se encontraron.");
        return;
    }

    const originalItems = Array.from(godparentsList.children);
    const numOriginalItems = originalItems.length;
    let currentIndex = 0; // 칈ndice del elemento original visible en la primera posici칩n
    let itemWidth = 0; // Se calcular치 din치micamente
    let autoPlayInterval; // Variable para el intervalo de auto-reproducci칩n

    // --- Preparaci칩n para el bucle infinito suave ---
    // Clona los elementos para crear el efecto de bucle.
    // Clona un n칰mero suficiente de 칤tems al principio y al final para evitar saltos
    const itemsToClone = numOriginalItems; // Para asegurar que haya suficientes clones para un bucle fluido

    for (let i = 0; i < itemsToClone; i++) {
        godparentsList.appendChild(originalItems[i].cloneNode(true)); // Clona del inicio al final
    }
    for (let i = numOriginalItems - 1; i >= numOriginalItems - itemsToClone; i--) {
        godparentsList.prepend(originalItems[i].cloneNode(true)); // Clona del final al inicio
    }

    // Actualiza la referencia a todos los 칤tems (originales + clones)
    const allCarouselItems = Array.from(godparentsList.children);
    const totalItems = allCarouselItems.length;

    // --- Funciones de Utilidad y L칩gica del Carrusel ---

    function updateItemWidth() {
        if (allCarouselItems.length > 0) {
            const itemStyle = getComputedStyle(allCarouselItems[0]);
            // Ancho del 칤tem + margen izquierdo + margen derecho
            itemWidth = allCarouselItems[0].offsetWidth + parseFloat(itemStyle.marginLeft) + parseFloat(itemStyle.marginRight);
        }
    }

    function createPaginationDots() {
        paginationContainer.innerHTML = ''; // Limpia puntos existentes
        for (let i = 0; i < numOriginalItems; i++) {
            const dot = document.createElement('span');
            dot.classList.add('pagination-dot');
            dot.dataset.index = i;
            dot.addEventListener('click', () => {
                goToSlide(i);
                resetAutoPlay(); // Reinicia el auto-play al interactuar manualmente
            });
            paginationContainer.appendChild(dot);
        }
    }

    function updatePaginationDots() {
        const dots = paginationContainer.querySelectorAll('.pagination-dot');
        dots.forEach((dot, index) => {
            if (index === currentIndex) {
                dot.classList.add('active');
            } else {
                dot.classList.remove('active');
            }
        });
    }

    function goToSlide(index, smooth = true) {
        currentIndex = index;

        // Calcular el desplazamiento basado en el 칤ndice real dentro de la lista extendida
        // Queremos mostrar el elemento original en la posici칩n `itemsToClone + currentIndex`
        const targetOffset = -(itemsToClone + currentIndex) * itemWidth;

        if (!smooth) {
            godparentsList.classList.add('no-transition');
        }
        godparentsList.style.transform = `translateX(${targetOffset}px)`;

        // Si se desactiv칩 la transici칩n, volver a activarla despu칠s de un breve momento
        if (!smooth) {
            setTimeout(() => {
                godparentsList.classList.remove('no-transition');
            }, 50);
        }

        updatePaginationDots();
    }

    // --- L칩gica del bucle infinito real ---
    // Esta funci칩n se llama al final de cada transici칩n para "resetear" la posici칩n
    // a los clones correspondientes, haciendo el bucle imperceptible.
    function handleTransitionEnd() {
        // Obtenemos la posici칩n actual de transform.
        // Convertimos la matriz de transformaci칩n a un valor de translateX
        const currentTransform = new DOMMatrixReadOnly(getComputedStyle(godparentsList).transform).m41;

        // Si estamos en una de las copias del final (adelante)
        // Ejemplo: Si tenemos A B C (originales) A' B' C' (clones)
        // Y el carrusel se mueve a A', reiniciamos a A (posici칩n original) sin transici칩n.
        if (currentIndex >= numOriginalItems) {
            currentIndex = 0; // Volver al primer elemento original
            goToSlide(currentIndex, false); // Mover sin transici칩n
        }
        // Si estamos en una de las copias del inicio (retrocediendo)
        // Ejemplo: Si tenemos A'' B'' C'' (clones) A B C (originales)
        // Y el carrusel se mueve a C'', reiniciamos a C (칰ltimo original) sin transici칩n.
        else if (currentIndex < 0) {
            currentIndex = numOriginalItems - 1; // Volver al 칰ltimo elemento original
            goToSlide(currentIndex, false); // Mover sin transici칩n
        }

        // Despu칠s del reset, se asegura que el punto activo sea el correcto
        updatePaginationDots();
    }

    // --- Auto-play L칩gica ---
    function startAutoPlay() {
        // Limpiar cualquier intervalo existente para evitar duplicados
        stopAutoPlay();
        autoPlayInterval = setInterval(() => {
            currentIndex = (currentIndex + 1); // No usamos % numOriginalItems aqu칤 directamente
            goToSlide(currentIndex); // El handleTransitionEnd se encargar치 del bucle
        }, 3000); // Mueve cada 3 segundos (ajusta este valor)
    }

    function stopAutoPlay() {
        clearInterval(autoPlayInterval);
    }

    function resetAutoPlay() {
        stopAutoPlay();
        startAutoPlay();
    }


    // --- Manejadores de Eventos ---

    nextButton.addEventListener('click', () => {
        currentIndex++;
        goToSlide(currentIndex);
        resetAutoPlay();
    });

    prevButton.addEventListener('click', () => {
        currentIndex--;
        goToSlide(currentIndex);
        resetAutoPlay();
    });

    // Escucha el fin de la transici칩n para manejar el bucle infinito
    godparentsList.addEventListener('transitionend', handleTransitionEnd);

    // Opcional: Pausar auto-play al pasar el mouse
    godparentsList.parentElement.addEventListener('mouseenter', stopAutoPlay);
    godparentsList.parentElement.addEventListener('mouseleave', startAutoPlay);


    // --- Inicializaci칩n ---
    updateItemWidth();
    createPaginationDots();

    // Posicionar el carrusel para que muestre el primer elemento original correctamente
    // Esto lo hacemos al inicio sin transici칩n
    goToSlide(0, false);

    // Iniciar el auto-play
    startAutoPlay();


    // Re-calcula y re-posiciona en resize para responsividad
    window.addEventListener('resize', () => {
        updateItemWidth();
        goToSlide(currentIndex, false); // Reposiciona instant치neamente
    });
}

// Funci칩n para la animaci칩n de los novios caminando
function initWalkingCoupleAnimation() {
    const groom = document.getElementById('groomWalking');
    const bride = document.getElementById('brideWalking');
    const walkingCoupleContainer = document.querySelector('.walking-couple-container');
    const triggerSection = document.getElementById('yourTargetSectionId'); // 춰Ahora es la secci칩n de C칩digo de Vestimenta!

    if (!groom || !bride || !walkingCoupleContainer || !triggerSection) {
        console.warn("Elementos de animaci칩n de novios no encontrados. Aseg칰rate de que los IDs y clases sean correctos y la secci칩n de encuentro exista.");
        return;
    }

    const initialOffset = 50; // Distancia inicial desde los bordes de la ventana (en px)

    function animateCouple() {
        const scrollY = window.scrollY || window.pageYOffset;

        const triggerSectionRect = triggerSection.getBoundingClientRect();
        // triggerSectionTop es la distancia desde el TOP del documento hasta el inicio de la secci칩n
        const triggerSectionTop = triggerSectionRect.top + window.scrollY;
        const triggerSectionHeight = triggerSection.offsetHeight;

        // Definimos el punto de inicio y fin de la "caminata" y "encuentro"
        // Empiezan a moverse cuando la secci칩n de vestimenta est치 a 80% de la altura de la ventana desde abajo
        const startMeetingPointScroll = triggerSectionTop - window.innerHeight * 0.8;
        // Se encuentran completamente cuando la parte inferior de la secci칩n de vestimenta entra en la vista
        const endMeetingPointScroll = triggerSectionTop + triggerSectionHeight - window.innerHeight * 0.2;
        // Opcional: un punto donde dejan de ser fijos y se "enganchan" a la secci칩n
        const detachPointScroll = triggerSectionTop + triggerSectionHeight - (walkingCoupleContainer.offsetHeight / 2);


        // --- L칩gica de la animaci칩n ---

        // 1. Antes del inicio de la caminata: Fijos y separados
        if (scrollY < startMeetingPointScroll) {
            groom.style.transform = `translateX(${initialOffset}px)`;
            bride.style.transform = `translateX(-${initialOffset}px)`;
            walkingCoupleContainer.style.position = 'fixed';
            walkingCoupleContainer.style.bottom = '0';
            walkingCoupleContainer.style.top = 'auto'; // Asegurarse de que top no est칠 configurado
            walkingCoupleContainer.style.transform = 'translateY(0)'; // No hay movimiento vertical
        }
        // 2. Durante la caminata y encuentro: Fijos y acerc치ndose
        else if (scrollY >= startMeetingPointScroll && scrollY < detachPointScroll) {
            // Calcula el progreso de acercamiento
            const approachProgress = Math.min(1, (scrollY - startMeetingPointScroll) / (endMeetingPointScroll - startMeetingPointScroll));
            const moveDistance = (window.innerWidth / 2) - groom.offsetWidth - initialOffset - 20; // Ajusta 20px para el espacio entre ellos
            // Calcular cu치nto se mueven desde initialOffset hacia el centro
            const currentMove = moveDistance * approachProgress;

            groom.style.transform = `translateX(${initialOffset + currentMove}px)`;
            bride.style.transform = `translateX(-${initialOffset + currentMove}px)`;

            walkingCoupleContainer.style.position = 'fixed';
            walkingCoupleContainer.style.bottom = '0';
            walkingCoupleContainer.style.top = 'auto';
            walkingCoupleContainer.style.transform = 'translateY(0)'; // Todav칤a no suben
        }
        // 3. Despu칠s del encuentro y subida con la p치gina: Posici칩n absoluta
        else {
            // Se aseguran de que est칠n en la posici칩n final de encuentro
            const finalMoveDistance = (window.innerWidth / 2) - groom.offsetWidth - initialOffset - 20; // La misma distancia final
            groom.style.transform = `translateX(${initialOffset + finalMoveDistance}px)`;
            bride.style.transform = `translateX(-${initialOffset + finalMoveDistance}px)`;

            // Calcular la posici칩n vertical para que se "peguen" a la secci칩n
            // Quieres que la *parte inferior* del contenedor de los novios se alinee
            // con la parte superior de la secci칩n de destino.
            const newTopPosition = triggerSectionTop - walkingCoupleContainer.offsetHeight;

            walkingCoupleContainer.style.position = 'absolute';
            walkingCoupleContainer.style.bottom = 'auto'; // Quitar el bottom para que 'top' funcione
            walkingCoupleContainer.style.top = `${newTopPosition}px`;
            walkingCoupleContainer.style.transform = 'translateY(0)'; // Resetear cualquier transformaci칩n de traslaci칩n
        }
    }

    // Ejecuta la funci칩n al cargar y en cada scroll
    window.addEventListener('scroll', animateCouple);
    // Ejecuta una vez para posicionar las im치genes correctamente al cargar la p치gina
    animateCouple();

    // Re-ejecuta en redimensionamiento para ajustar las posiciones
    window.addEventListener('resize', animateCouple);
}